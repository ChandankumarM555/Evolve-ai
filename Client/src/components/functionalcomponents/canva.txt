import React, { useEffect, useRef, useState } from 'react';

const GalaxyAnimation = () => {
    const canvasRef = useRef(null);
    const [dimensions, setDimensions] = useState({
        width: window.innerWidth,
        height: window.innerHeight
    });

    // Animation parameters
    const parameters = {
        particleCount: 1000,
        particleSize: 2,
        baseSpeed: 2,
        colorInside: '#ff6030',
        colorOutside: '#1b3984',
        maxDepth: 1000
    };

    // Particle class for managing individual particles
    class Particle {
        constructor(width, height) {
            this.x = Math.random() * width - width / 2;
            this.y = Math.random() * height - height / 2;
            this.z = Math.random() * parameters.maxDepth;
            this.speed = parameters.baseSpeed * (1 + Math.random());

            // Calculate color based on depth
            const depthRatio = this.z / parameters.maxDepth;
            this.color = this.lerpColor(parameters.colorInside, parameters.colorOutside, depthRatio);
        }

        update(width, height) {
            this.z -= this.speed;
            if (this.z < 1) {
                this.z = parameters.maxDepth;
                this.x = Math.random() * width - width / 2;
                this.y = Math.random() * height - height / 2;
            }
        }

        // Helper function to interpolate between colors
        lerpColor(colorA, colorB, amount) {
            const ah = parseInt(colorA.replace(/#/g, ''), 16);
            const bh = parseInt(colorB.replace(/#/g, ''), 16);
            const ar = (ah >> 16) & 0xff;
            const ag = (ah >> 8) & 0xff;
            const ab = ah & 0xff;
            const br = (bh >> 16) & 0xff;
            const bg = (bh >> 8) & 0xff;
            const bb = bh & 0xff;
            const rr = ar + amount * (br - ar);
            const rg = ag + amount * (bg - ag);
            const rb = ab + amount * (bb - ab);

            return `#${((1 << 24) + (rr << 16) + (rg << 8) + rb | 0).toString(16).slice(1)}`;
        }

        draw(ctx, width, height) {
            const perspective = parameters.maxDepth / (parameters.maxDepth - this.z);
            const x = this.x * perspective + width / 2;
            const y = this.y * perspective + height / 2;

            const size = Math.max(0.1, parameters.particleSize * perspective);
            const opacity = Math.min(1, (parameters.maxDepth - this.z) / parameters.maxDepth);

            ctx.beginPath();
            ctx.fillStyle = this.color;
            ctx.globalAlpha = opacity;
            ctx.arc(x, y, size, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    useEffect(() => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');
        let particles = [];
        let animationFrameId;

        // Initialize particles
        for (let i = 0; i < parameters.particleCount; i++) {
            particles.push(new Particle(dimensions.width, dimensions.height));
        }

        // Handle window resize
        const handleResize = () => {
            setDimensions({
                width: window.innerWidth,
                height: window.innerHeight
            });
        };

        window.addEventListener('resize', handleResize);

        // Animation function
        const animate = () => {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, dimensions.width, dimensions.height);

            particles.forEach(particle => {
                particle.update(dimensions.width, dimensions.height);
                particle.draw(ctx, dimensions.width, dimensions.height);
            });

            animationFrameId = requestAnimationFrame(animate);
        };

        animate();

        // Cleanup
        return () => {
            window.removeEventListener('resize', handleResize);
            cancelAnimationFrame(animationFrameId);
        };
    }, [dimensions]);

    return (
        <div className="relative w-screen h-screen overflow-hidden bg-black">
            <canvas
                ref={ canvasRef }
                width={ dimensions.width }
                height={ dimensions.height }
                className="absolute top-0 left-0"
            />
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center z-10">
                <h1 className="text-6xl mb-8 text-white font-bold">
                    Evolve <span className="text-[#ff6030]">AI Power</span>
                </h1>
                <button className="px-8 py-4 text-2xl bg-[#ff6030] text-white rounded-full 
                                 hover:bg-[#ff7040] transition-colors duration-300
                                 shadow-lg hover:shadow-xl">
                    Get Started
                </button>
            </div>
        </div>
    );
};

export default GalaxyAnimation;